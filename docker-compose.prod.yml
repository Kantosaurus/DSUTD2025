services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: webapp-postgres
    environment:
      POSTGRES_DB: webapp_db
      POSTGRES_USER: webapp_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - webapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U webapp_user -d webapp_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: webapp-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://webapp_user:${DB_PASSWORD}@postgres:5432/webapp_db
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3001
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - webapp-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    container_name: webapp-frontend
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - webapp-network
    restart: unless-stopped

  # Telegram Bot
  telegram-bot:
    build:
      context: "./telegram bot"
      dockerfile: Dockerfile
    container_name: webapp-telegram-bot
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: webapp_db
      DB_USER: webapp_user
      DB_PASSWORD: ${DB_PASSWORD}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      CHECK_INTERVAL_MINUTES: ${CHECK_INTERVAL_MINUTES:-5}
      REMINDER_MINUTES_BEFORE: ${REMINDER_MINUTES_BEFORE:-30}
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - webapp-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  webapp-network: